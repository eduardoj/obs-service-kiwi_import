#!/usr/bin/env ruby
lib = File.expand_path File.dirname(__FILE__)
require 'fileutils'
require 'optparse'
require 'yaml'
require "#{lib}/KiwiImport/lib/kiwi_archive_finder.rb"
require "#{lib}/KiwiImport/lib/kiwi_archive.rb"
require "#{lib}/KiwiImport/lib/repository_replacer.rb"
require "#{lib}/KiwiImport/lib/repository_appender.rb"
require "#{lib}/KiwiImport/lib/http_repository_orderer.rb"
require "#{lib}/KiwiImport/lib/osc_repository_orderer.rb"

options = {}
OptionParser.new do |opts|
  opts.on("--outdir THE_PATH", "the output directory") do |outdir|
    options[:outdir] = outdir
  end
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end.parse!

raise OptionParser::MissingArgument if options[:outdir].nil?

outdir = options[:outdir]
config = YAML.load(File.new("#{lib}/KiwiImport/config/config.yml").read)
api_url = ENV["OBS_SERVICE_APIURL"]

unless File.directory?(outdir) || File.exist?(outdir)
  raise "Output directory does not exist"
end

if api_url.to_s.empty?
  raise "No API url defined. This might be caused by using an older osc version."
end

kiwi_archive_path = KiwiArchiveFinder.new.archive
kiwi_archive = KiwiArchive.new(kiwi_archive_path, outdir).create_import!
if kiwi_archive.is_sle?
  kiwi_archive.config = RepositoryReplacer.new(kiwi_archive.config, config["sle_repositories"]).replace!
  kiwi_archive.config = RepositoryAppender.new(kiwi_archive.config, config["sle_dependencies_repository"]).append!
end

# We use osc locally as workaround because '/source?cmd=orderkiwirepos'
# is currently not accessible via build.o.o due to login proxy restrictions
if ENV["OSC_VERSION"].to_s.empty?
  orderer = HttpRepositoryOrderer.new(kiwi_archive.config, api_url, options)
else
  orderer = OscRepositoryOrderer.new(kiwi_archive.config_path)
end
kiwi_archive.config = orderer.order!
